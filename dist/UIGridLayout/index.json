{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A UIGridLayout (not to be confused with the abstract ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":54,"offset":53}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIGridStyleLayout"}],"position":{"start":{"line":1,"column":54,"offset":53},"end":{"line":1,"column":79,"offset":78}}},{"type":"text","value":"\nfrom which this class inherits) lays out sibling UI elements in multiple rows\nwithin the parent UI element, adding elements to a row one-by-one until the\nnext element would not fit. It then continues adding elements in the next row.\nA UIGridLayout will take UI elements' ","position":{"start":{"line":1,"column":79,"offset":78},"end":{"line":5,"column":39,"offset":350}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.GuiObject.Size"}],"position":{"start":{"line":5,"column":39,"offset":350},"end":{"line":5,"column":61,"offset":372}}},{"type":"text","value":" and\n","position":{"start":{"line":5,"column":61,"offset":372},"end":{"line":6,"column":1,"offset":377}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.GuiObject.Position"}],"position":{"start":{"line":6,"column":1,"offset":377},"end":{"line":6,"column":27,"offset":403}}},{"type":"text","value":" under control. While under control, these UI\nelements' properties will not be editable in the Properties window.","position":{"start":{"line":6,"column":27,"offset":403},"end":{"line":7,"column":68,"offset":516}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":68,"offset":516}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By default, it lays out elements in ","position":{"start":{"line":9,"column":1,"offset":518},"end":{"line":9,"column":37,"offset":554}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ascending","position":{"start":{"line":9,"column":39,"offset":556},"end":{"line":9,"column":48,"offset":565}}}],"position":{"start":{"line":9,"column":37,"offset":554},"end":{"line":9,"column":50,"offset":567}}},{"type":"text","value":" order where lower values\ntake more priority over higher values, but this can be changed to use\nelements' names by changing ","position":{"start":{"line":9,"column":50,"offset":567},"end":{"line":11,"column":29,"offset":691}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIListLayout.SortOrder"}],"position":{"start":{"line":11,"column":29,"offset":691},"end":{"line":11,"column":59,"offset":721}}},{"type":"text","value":" to ","position":{"start":{"line":11,"column":59,"offset":721},"end":{"line":11,"column":63,"offset":725}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Name","position":{"start":{"line":11,"column":65,"offset":727},"end":{"line":11,"column":69,"offset":731}}}],"position":{"start":{"line":11,"column":63,"offset":725},"end":{"line":11,"column":71,"offset":733}}},{"type":"text","value":". A\nUIListLayout will automatically re-layout elements when elements are\nadded/removed, or if a relevant property changes:\n","position":{"start":{"line":11,"column":71,"offset":733},"end":{"line":14,"column":1,"offset":856}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.GuiObject.LayoutOrder"}],"position":{"start":{"line":14,"column":1,"offset":856},"end":{"line":14,"column":30,"offset":885}}},{"type":"text","value":" or ","position":{"start":{"line":14,"column":30,"offset":885},"end":{"line":14,"column":34,"offset":889}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.Instance.Name"}],"position":{"start":{"line":14,"column":34,"offset":889},"end":{"line":14,"column":55,"offset":910}}},{"type":"text","value":". This can be triggered\nmanually by calling ","position":{"start":{"line":14,"column":55,"offset":910},"end":{"line":15,"column":21,"offset":954}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIGridStyleLayout:ApplyLayout()"}],"position":{"start":{"line":15,"column":21,"offset":954},"end":{"line":15,"column":60,"offset":993}}},{"type":"text","value":", though this is\ntypically not necessary.","position":{"start":{"line":15,"column":60,"offset":993},"end":{"line":16,"column":25,"offset":1034}}}],"position":{"start":{"line":9,"column":1,"offset":518},"end":{"line":16,"column":25,"offset":1034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The actual cell sizes are the same for all cells. A UIGridLayout will respect\nUI constraints placed with it, such as ","position":{"start":{"line":18,"column":1,"offset":1036},"end":{"line":19,"column":40,"offset":1153}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UISizeConstraint"}],"position":{"start":{"line":19,"column":40,"offset":1153},"end":{"line":19,"column":64,"offset":1177}}},{"type":"text","value":" and\n","position":{"start":{"line":19,"column":64,"offset":1177},"end":{"line":20,"column":1,"offset":1182}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIAspectRatioConstraint"}],"position":{"start":{"line":20,"column":1,"offset":1182},"end":{"line":20,"column":32,"offset":1213}}},{"type":"text","value":". Elements in the layout can span multiple\ncells if they have a ","position":{"start":{"line":20,"column":32,"offset":1213},"end":{"line":21,"column":22,"offset":1277}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UISizeConstraint"}],"position":{"start":{"line":21,"column":22,"offset":1277},"end":{"line":21,"column":46,"offset":1301}}},{"type":"text","value":" with a\n","position":{"start":{"line":21,"column":46,"offset":1301},"end":{"line":22,"column":1,"offset":1309}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UISizeConstraint.MinSize|MinSize"}],"position":{"start":{"line":22,"column":1,"offset":1309},"end":{"line":22,"column":41,"offset":1349}}},{"type":"text","value":" set higher than the\n","position":{"start":{"line":22,"column":41,"offset":1349},"end":{"line":23,"column":1,"offset":1370}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIGridLayout.CellSize|CellSize"}],"position":{"start":{"line":23,"column":1,"offset":1370},"end":{"line":23,"column":39,"offset":1408}}},{"type":"text","value":". It is possible to limit the number of\nelements per row using ","position":{"start":{"line":23,"column":39,"offset":1408},"end":{"line":24,"column":24,"offset":1471}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UIGridLayout.FillDirectionMaxCells"}],"position":{"start":{"line":24,"column":24,"offset":1471},"end":{"line":24,"column":66,"offset":1513}}},{"type":"text","value":". If set to\n1, it is possible to create a single row of elements (as each element would be\npositioned in its own row).","position":{"start":{"line":24,"column":66,"offset":1513},"end":{"line":26,"column":28,"offset":1631}}}],"position":{"start":{"line":18,"column":1,"offset":1036},"end":{"line":26,"column":28,"offset":1631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This layout is appropriate when line breaks are OK after arbitrary cells. For\nexample, a set of inventory spaces is a good use of this layout. If building a\ntable of values in which a line break is not appropriate in the middle of\ntabular data, it might be a better idea to use a ","position":{"start":{"line":28,"column":1,"offset":1633},"end":{"line":31,"column":50,"offset":1913}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Class.UITableLayout"}],"position":{"start":{"line":31,"column":50,"offset":1913},"end":{"line":31,"column":71,"offset":1934}}},{"type":"text","value":"\ninstead.","position":{"start":{"line":31,"column":71,"offset":1934},"end":{"line":32,"column":9,"offset":1943}}}],"position":{"start":{"line":28,"column":1,"offset":1633},"end":{"line":32,"column":9,"offset":1943}}}],"data":{"quirksMode":false},"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":1,"offset":0}}}