{
    "type": "root",
    "children": [
        {
            "type": "element",
            "tagName": "p",
            "properties": {},
            "children": [
                {
                    "type": "text",
                    "value": "This property is set up automatically by the 3D Importer.",
                    "position": {
                        "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 58,
                            "offset": 57
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                },
                "end": {
                    "line": 1,
                    "column": 58,
                    "offset": 57
                }
            }
        },
        {
            "type": "text",
            "value": "\n"
        },
        {
            "type": "element",
            "tagName": "p",
            "properties": {},
            "children": [
                {
                    "type": "text",
                    "value": "Describes where a global zero was while authoring the cage mesh in an\nasset creation tool such as Blender or Maya. This property is not used by\nthe deformer but it is useful for tools/aligning scripts, for example\naligning two parts by matching their pivots as follows:",
                    "position": {
                        "start": {
                            "line": 3,
                            "column": 1,
                            "offset": 59
                        },
                        "end": {
                            "line": 6,
                            "column": 56,
                            "offset": 328
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 3,
                    "column": 1,
                    "offset": 59
                },
                "end": {
                    "line": 6,
                    "column": 56,
                    "offset": 328
                }
            }
        },
        {
            "type": "text",
            "value": "\n"
        },
        {
            "type": "element",
            "tagName": "pre",
            "properties": {},
            "children": [
                {
                    "type": "element",
                    "tagName": "code",
                    "properties": {},
                    "children": [
                        {
                            "type": "text",
                            "value": "local function alignWraps()\n\tlocal selectionService = game:GetService(\"Selection\")\n\tlocal selectedObjects = selectionService:Get()\n\tlocal alignObjects = {}\n\tfor _, obj in pairs(selectedObjects) do\n\t\tif obj:IsA(\"BaseWrap\") then\n\t\t\t--print(\"Wrap: \" .. obj.Name)\n\t\t\ttable.insert(alignObjects, obj)\n\t\telse\n\t\t\tprint(\"Ignore: \" .. obj.Name)\n\t\tend\n\tend\n\n\tif #alignObjects < 2 then\n\t\twarn(\"You need to select at least two wraps\")\n\t\treturn\n\tend\n\n\tlocal anchorWrap = alignObjects[1]\n\tlocal worldA_from_Wrap = anchorWrap.ImportOriginWorld\n\tprint(\"Anchor: \" .. anchorWrap.Name)\n\tfor i = 2, #alignObjects do\n\t\tlocal wrapToAlign = alignObjects[i]\n\t\tprint(\"Align: \" .. wrapToAlign.Name)\n\t\tlocal wrap_from_WorldB = wrapToAlign.ImportOriginWorld:Inverse()\n\t\tlocal worldA_from_WorldB = worldA_from_Wrap * wrap_from_WorldB\n\t\tlocal worldB = wrapToAlign.Parent.CFrame\n\t\t-- Note: adjust CFrame of the parent part\n\t\twrapToAlign.Parent.CFrame = (worldB_from_WorldB * worldB)\n\tend\nend\n"
                        }
                    ],
                    "position": {
                        "start": {
                            "line": 8,
                            "column": 1,
                            "offset": 330
                        },
                        "end": {
                            "line": 40,
                            "column": 4,
                            "offset": 1300
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 8,
                    "column": 1,
                    "offset": 330
                },
                "end": {
                    "line": 40,
                    "column": 4,
                    "offset": 1300
                }
            }
        }
    ],
    "data": {
        "quirksMode": false
    },
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 1,
            "column": 1,
            "offset": 0
        }
    }
}